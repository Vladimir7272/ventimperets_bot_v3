from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
import random
import os

TOKEN = os.getenv("BOT_TOKEN")

OBJECTS = [
    "–ö–≤–∞—Ä—Ç–∏—Ä–∞ –±–µ–∑ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–∞",
    "–û—Ñ–∏—Å –∑–∞–¥—ã—Ö–∞–µ—Ç—Å—è –æ—Ç –¥—É—Ö–æ—Ç—ã",
    "–ú–∞–≥–∞–∑–∏–Ω —Å –ø–ª–µ—Å–µ–Ω—å—é –Ω–∞ —Å—Ç–µ–Ω–∞—Ö",
    "–¶–µ—Ö, –≥–¥–µ –ª—é–¥–∏ —Ç–∞—é—Ç –æ—Ç –∂–∞—Ä—ã",
    "–î–æ–º, –≥–¥–µ –æ–∫–Ω–∞ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è",
    "–ö–æ—Ç—Ç–µ–¥–∂ —Å –ø–ª–µ—Å–µ–Ω—å—é –∏ –∑–∞—Ç—Ö–ª–æ—Å—Ç—å—é"
]

HUMOR_PHRASES = [
    "–ù–∞ —Å–∫–ª–∞–¥–µ –±–æ–ª—å—à–µ –Ω–µ –ø–∞—Ö–Ω–µ—Ç –∫–µ—Ñ–∏—Ä–æ–º!",
    "–¢—ã —Å–ø–∞—Å –±–∞–±—É—à–∫—É —Å –≥–∏–ø—Å–æ–≤—ã–º –º–æ–ø—Å–æ–º –æ—Ç –¥—É—Ö–æ—Ç—ã!",
    "–ñ–∞—Ä–∞ —Å–¥–∞–ª–∞—Å—å –±–µ–∑ –±–æ—è!",
    "–¢–µ–ø–µ—Ä—å –≤ –æ—Ñ–∏—Å–µ —Å–Ω–æ–≤–∞ –º–æ–∂–Ω–æ –¥—ã—à–∞—Ç—å!",
    "–ü–ª–µ—Å–µ–Ω—å –∫—Ä–∏—á–∏—Ç: '–ú—ã —Å–¥–∞—ë–º—Å—è!'"
]

TOOLS = {
    "üîß –ë—ã—Å—Ç—Ä—ã–π –ø–µ—Ä—Ñ–æ—Ä–∞—Ç–æ—Ä": {"cost": 50, "bonus": "+10% XP"},
    "üì¶ –°–∫–ª–∞–¥ —Ñ–∏–ª—å—Ç—Ä–æ–≤": {"cost": 100, "bonus": "+1 –∑–∞–∫–∞–∑ –≤ –¥–µ–Ω—å"},
    "üíº –≠–º–±–ª–µ–º–∞ –ü—Ä–æ": {"cost": 150, "bonus": "–≠–ª–∏—Ç–Ω—ã–µ –∑–∞–∫–∞–∑—ã"}
}

user_states = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_states[user_id] = {
        "coins": 0,
        "xp": 0,
        "level": 1,
        "orders": 0,
        "tools": [],
        "active_task": None,
        "last_emergency": False
    }
    keyboard = [["üöß –í–∑—è—Ç—å –∑–∞–∫–∞–∑", "üî• –°—Ä–æ—á–Ω—ã–π –≤—ã–∑–æ–≤"], ["üìä –ü—Ä–æ—Ñ–∏–ª—å", "üõí –ú–∞–≥–∞–∑–∏–Ω"], ["üèÜ –†–µ–π—Ç–∏–Ω–≥"]]
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç, –º–æ–Ω—Ç–∞–∂–Ω–∏–∫! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É *–í–µ–Ω—Ç–ò–º–ø–µ—Ä–µ—Ü v3*!",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True),
        parse_mode="Markdown"
    )

async def handle_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text

    if user_id not in user_states:
        await start(update, context)
        return

    user = user_states[user_id]

    if text == "üöß –í–∑—è—Ç—å –∑–∞–∫–∞–∑":
        task = random.choice(OBJECTS)
        user["active_task"] = task
        keyboard = [["üîß –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É"]]
        await update.message.reply_text(
            f"üõ†Ô∏è –ù–æ–≤—ã–π –æ–±—ä–µ–∫—Ç: *{task}*\n\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ–Ω—Ç–∏–ª—è—Ü–∏—é!",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True),
            parse_mode="Markdown"
        )

    elif text == "üî• –°—Ä–æ—á–Ω—ã–π –≤—ã–∑–æ–≤":
        if user["last_emergency"]:
            await update.message.reply_text("‚ùó –°—Ä–æ—á–Ω—ã–π –∑–∞–∫–∞–∑ —É–∂–µ –±—ã–ª —Å–µ–≥–æ–¥–Ω—è. –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∑–∞–≤—Ç—Ä–∞!")
            return
        user["last_emergency"] = True
        user["coins"] += 30
        user["xp"] += 20
        await update.message.reply_text("üö® –°—Ä–æ—á–Ω—ã–π –æ–±—ä–µ–∫—Ç –æ–±—Å–ª—É–∂–µ–Ω! +20 XP, +30 –ö–ª–∏–º–∞—Ç–ö–æ–∏–Ω–æ–≤")

    elif text == "üîß –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É":
        if not user.get("active_task"):
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤–æ–∑—å–º–∏ –∑–∞–∫–∞–∑! üßê")
            return

        user["orders"] += 1
        base_xp = 10
        bonus = 1.1 if "üîß –ë—ã—Å—Ç—Ä—ã–π –ø–µ—Ä—Ñ–æ—Ä–∞—Ç–æ—Ä" in user["tools"] else 1.0
        gained_xp = int(base_xp * bonus)
        user["xp"] += gained_xp
        user["coins"] += 10

        humor = random.choice(HUMOR_PHRASES)

        if user["xp"] >= user["level"] * 50:
            user["level"] += 1
            user["coins"] += 5
            await update.message.reply_text(f"üéâ –£—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω! –¢–µ–ø–µ—Ä—å —Ç—ã —É—Ä–æ–≤–µ–Ω—å {user['level']} –∏ –ø–æ–ª—É—á–∏–ª +5 –ö–ª–∏–º–∞—Ç–ö–æ–∏–Ω–æ–≤! ü•≥")

        user["active_task"] = None
        keyboard = [["üöß –í–∑—è—Ç—å –∑–∞–∫–∞–∑", "üî• –°—Ä–æ—á–Ω—ã–π –≤—ã–∑–æ–≤"], ["üìä –ü—Ä–æ—Ñ–∏–ª—å", "üõí –ú–∞–≥–∞–∑–∏–Ω"], ["üèÜ –†–µ–π—Ç–∏–Ω–≥"]]
        await update.message.reply_text(
            f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! +{gained_xp} XP, +10 –ö–ª–∏–º–∞—Ç–ö–æ–∏–Ω–æ–≤\nüí¨ {humor}",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )

    elif text == "üìä –ü—Ä–æ—Ñ–∏–ª—å":
        await update.message.reply_text(
            f"üìä –ü—Ä–æ—Ñ–∏–ª—å:\n"
            f"üîπ –£—Ä–æ–≤–µ–Ω—å: {user['level']}\n"
            f"üîß –ó–∞–∫–∞–∑–æ–≤: {user['orders']}\n"
            f"üí∞ –ö–ª–∏–º–∞—Ç–ö–æ–∏–Ω—ã: {user['coins']}\n"
            f"‚≠ê XP: {user['xp']}\n"
            f"üß∞ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {', '.join(user['tools']) if user['tools'] else '–Ω–µ—Ç'}\n"
            f"üö∂ –°–ø–∞—Å–µ–Ω–æ –ª—é–¥–µ–π: {user['orders'] * 3}"
        )

    elif text == "üõí –ú–∞–≥–∞–∑–∏–Ω":
        message = "üõí –ú–∞–≥–∞–∑–∏–Ω –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:\n"
        for tool, data in TOOLS.items():
            message += f"{tool} ‚Äî {data['cost']} –∫–æ–∏–Ω–æ–≤ ({data['bonus']})\n"
        message += "\n–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å."
        await update.message.reply_text(message)

    elif text in TOOLS:
        if text in user["tools"]:
            await update.message.reply_text("–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å —ç—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç.")
            return
        if user["coins"] >= TOOLS[text]["cost"]:
            user["coins"] -= TOOLS[text]["cost"]
            user["tools"].append(text)
            await update.message.reply_text(f"‚úÖ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞: {text}")
        else:
            await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ö–ª–∏–º–∞—Ç–ö–æ–∏–Ω–æ–≤ üí∏")

    elif text == "üèÜ –†–µ–π—Ç–∏–Ω–≥":
        top = sorted(user_states.items(), key=lambda x: x[1]['xp'], reverse=True)[:5]
        msg = "üèÜ –¢–û–ü –º–æ–Ω—Ç–∞–∂–Ω–∏–∫–æ–≤:\n"
        for i, (uid, udata) in enumerate(top, 1):
            msg += f"{i}. ID {uid} ‚Äî {udata['xp']} XP\n"
        await update.message.reply_text(msg)

    else:
        await update.message.reply_text("–í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é ‚¨áÔ∏è")

app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_choice))

app.run_polling()
